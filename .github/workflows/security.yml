name: Security

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan'
        required: false
        type: choice
        default: 'full'
        options:
          - 'full'
          - 'dependencies-only'
          - 'code-only'

# Define default permissions
permissions:
  contents: read

env:
  CACHE_VERSION: v1
  SCAN_DIR: memori  # Configurable directory for scans

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'dependencies-only'
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ env.CACHE_VERSION }}-${{ runner.os }}-security-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}

      - name: Check for requirements.txt
        run: |
          if [ ! -f requirements.txt ]; then
            echo "requirements.txt not found, skipping dependency installation"
            exit 0
          fi

      - name: Install dependencies
        if: steps.check-requirements.outputs.result == 'found'
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install safety pip-audit
          pip install -e ".[dev]"

      - name: Run Safety check
        if: steps.check-requirements.outputs.result == 'found'
        run: |
          echo "Running Safety dependency scan..."
          safety check --json --output safety-report.json --continue-on-error || true
          safety check --short-report

      - name: Run pip-audit
        if: steps.check-requirements.outputs.result == 'found'
        run: |
          echo "Running pip-audit scan..."
          pip-audit --format=json --output=pip-audit-report.json --progress-spinner=off || true
          pip-audit --format=cyclonedx --output=sbom.json || true
          pip-audit

      - name: Upload dependency scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-scan-results
          path: |
            safety-report.json
            pip-audit-report.json
            sbom.json
          if-no-files-found: warn

  code-security-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.scan_type == 'full' || github.event.inputs.scan_type == 'code-only'
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] semgrep
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      - name: Run Bandit security linter
        run: |
          echo "Running Bandit security scan..."
          if [ -d "${{ env.SCAN_DIR }}" ]; then
            bandit -r ${{ env.SCAN_DIR }}/ \
              -f json \
              -o bandit-report.json \
              --severity-level medium \
              --confidence-level medium \
              --exclude tests/ || true
            bandit -r ${{ env.SCAN_DIR }}/ \
              --severity-level medium \
              --confidence-level medium \
              --exclude tests/
          else
            echo "Directory ${{ env.SCAN_DIR }} not found, skipping Bandit scan"
          fi

      - name: Run Semgrep security scan
        run: |
          echo "Running Semgrep security scan..."
          if [ -d "${{ env.SCAN_DIR }}" ]; then
            semgrep --config=auto ${{ env.SCAN_DIR }}/ \
              --json \
              --output=semgrep-report.json \
              --severity=WARNING \
              --severity=ERROR || true
            semgrep --config=auto ${{ env.SCAN_DIR }}/ \
              --severity=WARNING \
              --severity=ERROR
          else
            echo "Directory ${{ env.SCAN_DIR }} not found, skipping Semgrep scan"
          fi

      - name: Upload code scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-security-scan-results
          path: |
            bandit-report.json
            semgrep-report.json
          if-no-files-found: warn

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secrets scan
        uses: trufflesecurity/trufflehog@v3.81.9
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      contents: read
      security-events: write
      actions: read

    strategy:
      fail-fast: false
      matrix:
        language: ['python']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
            pip install -e ".[dev]"
          fi

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    permissions:
      contents: read
      security-events: write
      actions: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for Dockerfile
        run: |
          if [ ! -f Dockerfile ]; then
            echo "Dockerfile not found, skipping container scan"
            exit 0
          fi

      - name: Build Docker image
        if: steps.check-dockerfile.outputs.result == 'found'
        run: |
          echo "Building Docker image for security scan..."
          docker build -t memori:security-scan .

      - name: Run Trivy vulnerability scanner
        if: steps.check-dockerfile.outputs.result == 'found'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'memori:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        if: always() && steps.check-dockerfile.outputs.result == 'found'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  security-scorecard:
    name: OpenSSF Scorecard
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    permissions:
      security-events: write
      id-token: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Run analysis
        uses: ossf/scorecard-action@v2.4.0
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: scorecard-results
          path: results.sarif
          retention-days: 5

      - name: Upload to code-scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, secrets-scan]
    if: always()
    permissions:
      contents: read
      actions: read

    steps:
      - name: Download dependency scan results
        uses: actions/download-artifact@v4
        with:
          name: dependency-scan-results
          path: dependency-scan-results

      - name: Download code scan results
        uses: actions/download-artifact@v4
        with:
          name: code-security-scan-results
          path: code-security-scan-results

      - name: Generate security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result == 'success' && 'Passed' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Security | ${{ needs.code-security-scan.result == 'success' && 'Passed' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Scan | ${{ needs.secrets-scan.result == 'success' && 'Passed' || 'Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.dependency-scan.result }}" == "success" && "${{ needs.code-security-scan.result }}" == "success" && "${{ needs.secrets-scan.result }}" == "success" ]]; then
            echo "**All security scans passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Some security scans failed or found issues.** Please review the detailed reports." >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Scan Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependency vulnerabilities**: Check Safety and pip-audit reports" >> $GITHUB_STEP_SUMMARY
          echo "- **Code security issues**: Check Bandit and Semgrep reports" >> $GITHUB_STEP_SUMMARY
          echo "- **Exposed secrets**: Check TruffleHog results" >> $GITHUB_STEP_SUMMARY
          echo "- **Download artifacts** to view detailed reports" >> $GITHUB_STEP_SUMMARY

      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const needs = ${{ toJson(needs) }};
            let status = 'All security scans passed!';
            let icon = 'Summary';
            
            if (needs['dependency-scan'].result !== 'success' || 
                needs['code-security-scan'].result !== 'success' || 
                needs['secrets-scan'].result !== 'success') {
              status = 'Some security scans failed or found issues.';
              icon = 'Warning';
            }
            
            const body = `## ${icon} Security Scan Results
            
            ${status}
            
            | Scan Type | Status |
            |-----------|---------|
            | Dependency Scan | ${needs['dependency-scan'].result === 'success' ? 'Passed' : 'Failed'} |
            | Code Security | ${needs['code-security-scan'].result === 'success' ? 'Passed' : 'Failed'} |
            | Secrets Scan | ${needs['secrets-scan'].result === 'success' ? 'Passed' : 'Failed'} |
            
            View detailed reports in the workflow artifacts.`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
